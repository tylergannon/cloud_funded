require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::Projects::CategoriesController do
  render_views
  # This should return the minimal set of attributes required to create a valid
  # Projects::Category. As you add validations to Projects::Category, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {name: "Businesses"}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Projects::CategoriesController. Be sure to keep this updated too.
  def valid_session
    {}
  end
  
  describe "with no session" do
    it "should redirect to sign in path" do
      get :index
      response.should redirect_to(new_member_session_path)
    end
  end
  
  describe "with non-admin session" do
    before :each do
      sign_in_as_member
    end
    it "should give a 404 error" do
      get :index
      response.should be_not_found
    end
  end
  
  describe "with valid session" do
    before :each do
      sign_in_as_admin
    end
    describe "GET index" do
      it "assigns all projects_categories as @projects_categories" do
        category = Projects::Category.create! valid_attributes
        get :index, {}
        assigns(:projects_categories).should eq([category])
      end
    end

    describe "GET show" do
      it "assigns the requested projects_category as @projects_category" do
        category = Projects::Category.create! valid_attributes
        get :show, {:id => category.to_param}
        assigns(:category).should eq(category)
      end
    end

    describe "GET new" do
      it "assigns a new projects_category as @projects_category" do
        get :new, {}
        assigns(:category).should be_a_new(Projects::Category)
      end
    end

    describe "GET edit" do
      it "assigns the requested projects_category as @projects_category" do
        category = Projects::Category.create! valid_attributes
        get :edit, {:id => category.to_param}
        assigns(:category).should eq(category)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Projects::Category" do
          expect {
            post :create, {:category => valid_attributes}
          }.to change(Projects::Category, :count).by(1)
        end

        it "assigns a newly created projects_category as @projects_category" do
          post :create, {:category => valid_attributes}
          assigns(:category).should be_a(Projects::Category)
          assigns(:category).should be_persisted
        end

        it "redirects to the created projects_category" do
          post :create, {:category => valid_attributes}
          response.should redirect_to(admin_projects_categories_path)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved projects_category as @projects_category" do
          # Trigger the behavior that occurs when invalid params are submitted
          Projects::Category.any_instance.stub(:save).and_return(false)
          post :create, {:category => {}}
          assigns(:category).should be_a_new(Projects::Category)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Projects::Category.any_instance.stub(:save).and_return(false)
          post :create, {:category => {}}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested projects_category" do
          category = Projects::Category.create! valid_attributes
          # Assuming there are no other projects_categories in the database, this
          # specifies that the Projects::Category created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Projects::Category.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:id => category.to_param, :category => {'these' => 'params'}}
        end

        it "assigns the requested projects_category as @projects_category" do
          category = Projects::Category.create! valid_attributes
          put :update, {:id => category.to_param, :category => valid_attributes}
          assigns(:category).should eq(category)
        end

        it "redirects to the projects_category" do
          category = Projects::Category.create! valid_attributes
          put :update, {:id => category.to_param, :category => valid_attributes}
          response.should redirect_to(admin_projects_categories_path)
        end
      end

      describe "with invalid params" do
        it "assigns the category as @category" do
          category = Projects::Category.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Projects::Category.any_instance.stub(:save).and_return(false)
          put :update, {:id => category.to_param, :category => {}}
          assigns(:category).should eq(category)
        end

        it "re-renders the 'edit' template" do
          category = Projects::Category.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Projects::Category.any_instance.stub(:valid?).and_return(false)
          put :update, {:id => category.to_param, :category => {}}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested category" do
        category = Projects::Category.create! valid_attributes
        expect {
          delete :destroy, {:id => category.to_param}
        }.to change(Projects::Category, :count).by(-1)
      end

      it "redirects to the projects_categories list" do
        category = Projects::Category.create! valid_attributes
        delete :destroy, {:id => category.to_param}
        response.should redirect_to(admin_projects_categories_url)
      end
    end
  end
end
